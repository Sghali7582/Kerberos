package TGS;

import Comms.Messenger;
import dominio.Security.Encryption;
import dominio.Security.KeyMethods;
import dominio.Ticket.Ticket;
import dominio.Ticket.UTicket;

import javax.crypto.SecretKey;
import java.net.Socket;
import java.security.PublicKey;
import java.sql.Timestamp;
import java.time.Instant;

/**
 * @author Silver-VS
 */

public class ProcessRequest {

    public boolean processUserRequest(Socket socket) {
        try {
            UTicket userRequest = new Messenger().acceptTicket(socket);

            //  We decrypt the ticket sent by the AS with our private key.
            userRequest.decryptTicket(KeyMethods.importPrivate(), "TGT");

            Ticket tgt = userRequest.searchTicket("TGT");
            Ticket userService = userRequest.searchTicket("request4TGS");
            Ticket userAuth = userRequest.searchTicket("auth");

            //  We compare the ID of the client.
            if (tgt.getFirstId().equals(userAuth.getFirstId())) {
                //  We compare the IP address of the client.
                if (tgt.getAddressIP().equals(socket.getInetAddress().toString())) {

                    Encryption encryption = new Encryption();
                    //  We recover the session key generated by the AS to be able to send a secure response
                    SecretKey sessionKeyClientTGS = encryption.convertString2Key(tgt.getKey());
                    //  We generate a session key for the user to use with the Server.
                    SecretKey sessionKeyClientServer = encryption.keyGenerator();
                    //  We generate the time of expedition.
                    Timestamp timestamp = Timestamp.from(Instant.now());

                    UTicket userResponse = new UTicket();
                    userResponse.generateResponse4User( //
                            "V - Diego", //  ID v
                            timestamp.toString(), // TS 4
                            userService.getLifetime(), //  Tiempo de vida 2
                            encryption.convertKey2String(sessionKeyClientServer) //  K c-v
                    );

                    userResponse.generateTicket(
                            "serviceTicket",
                            tgt.getFirstId(), // ID c
                            userService.getFirstId(), //  ID v
                            timestamp.toString(),  // TS 4
                            tgt.getAddressIP(), //  AD c
                            userService.getLifetime(), //  Tiempo de vida 4
                            encryption.convertKey2String(sessionKeyClientServer) //  K c-v
                    );

                    String publicServerName = "26.66.159.197" + ".key";
                    PublicKey publicTGS = KeyMethods.importPublic(publicServerName);

                    userResponse.encryptTicket(publicTGS, "serviceTicket");

                    userResponse.encryptTicket(sessionKeyClientTGS, "V - Diego");
                    userResponse.encryptTicket(sessionKeyClientTGS, "serviceTicket");

                    return new Messenger().ticketResponse(socket, userResponse);
                }
            }

            boolean flag;
            do flag = new Messenger().returnResponse(socket, false); while (!flag);
            return false;

        } catch (Exception e) {
            return false;
        }
    }

}
